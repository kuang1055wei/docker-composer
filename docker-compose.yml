version: "1.0"

# 使用创建好的网络，而不是让docker-compose自己创建网络
networks:
  app-net:
    name: app-net
  kong-net:
    driver: bridge

# docker-compose 创建网卡
#networks:
#  app-net:
#    driver: bridge


services:
#  php71:
#    build:
#      context: .
#      dockerfile: Dockerfile.php71

  redis:
    image: bitnami/redis:latest
    container_name: redis
    restart: always
    networks:
      - app-net
    ports:
      - 6379:6379
    environment:
      ALLOW_EMPTY_PASSWORD: "yes" #允许空密码登录
    volumes:
      -  /home/wwwroot/docker/redis/data:/bitnami/redis/data

  etcd-server:
    image: bitnami/etcd:3.4.18
    container_name: etcd-server
    restart: always
    networks:
      - app-net
    ports:
      - 2379:2379
      - 2380:2380
    environment:
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ADVERTISE_CLIENT_URLS: "http://192.168.50.100:2379"

  elasticsearch:
    image: elasticsearch:7.16.1
    container_name: elasticsearch
    restart: always
    networks:
      - app-net
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms128m -Xmx128m
    volumes:
      - /home/wwwroot/docker/elasticsearch/data:/usr/share/elasticsearch/data
      - /home/wwwroot/docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml

  # es的web管理界面
  elasticsearch-head:
    image: mobz/elasticsearch-head:5-alpine
    container_name: elasticsearch-head
    restart: always
    networks:
      - app-net
    ports:
      - 9100:9100

  jaeger:
    image: jaegertracing/all-in-one
    container_name: jaeger
    restart: always
    networks:
      - app-net
    ports:
      - 16686:16686
      - 14268:14268 #UDP  agent发送jaeger.thrift格式数据
      - 5775:5775 #UDP  接收兼容zipkin的协议数据
      - 6831:6831 #UDP  接收兼容jaeger的兼容协议
      - 5778:5778 #http 数据量大不建议使用
      - 9411:9411
    environment: #如果要依赖elasticsearch，请打开下面的配置
      SPAN_STORAGE_TYPE: "elasticsearch" #配置elasticsearch 作为存储
      ES_SERVER_URLS: "http://elasticsearch:9200" #配置elasticsearch 作为存储
    depends_on:
      - elasticsearch


#  kibana:
#    image: kibana:7.16.1
#    container_name: kibana
#    restart: always
#    networks:
#      - app-net
#    ports:
#      - 5601:5601
#    environment:
#      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
#    volumes:
#      - /home/wwwroot/docker/kibana/config:/usr/share/kibana/config #配置文件挂载
#    depends_on:
#      - elasticsearch
##
#  zookeeper:
#    image: 'bitnami/zookeeper:latest'
#    container_name: zookeeper
#    restart: always
#    networks:
#      - app-net
#    ports:
#      - 2181:2181
#    environment:
#      ALLOW_ANONYMOUS_LOGIN: yes
#
#  kafka:
#    image: bitnami/kafka:latest
#    container_name: kafka
#    restart: always
#    networks:
#      - app-net
#    ports:
#      - 9092:9092
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092"
#      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
#      KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper:2181"
#      ALLOW_PLAINTEXT_LISTENER: "yes"
#      KAFKA_HEAP_OPTS: "-Xmx256m -Xms256m"
#    depends_on:
#      - zookeeper

#  kong-database:
#    image: postgres:9.6
#    restart: always  #每次总是启动
#    networks:
#      - kong-net
#    environment:
#      POSTGRES_USER: kong
#      POSTGRES_DB: kong
#      POSTGRES_PASSWORD: kong
#    ports:
#      - "5432:5432"
#
#  kong-migration:
#    image: kong:latest
#    command: "kong migrations bootstrap"
#    networks:
#      - kong-net
#    restart: on-failure
#    environment:
#      - KONG_DATABASE=postgres
#      - KONG_PG_DATABASE=kong
#      - KONG_PG_PASSWORD=kong
#      - KONG_PG_HOST=kong-database
#    links:
#      - kong-database #连接的是kong-database服务的
#    depends_on:
#      - kong-database #依赖于kong-database服务
#
#  kong:
#    image: kong:latest
#    restart: always
#    networks:
#      - kong-net
#    environment:
#      KONG_DATABASE: postgres
#      KONG_PG_HOST: kong-database
#      KONG_PG_PASSWORD: kong
#      KONG_PROXY_LISTEN: 0.0.0.0:8000          # 代理监听http
#      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443       # 代理监听https
#      KONG_ADMIN_LISTEN: 0.0.0.0:8001     # Kong的管理API，不可暴露在公网
#    depends_on:
#      - kong-migration
#    links:
#      - kong-database
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://kong:8001" ]
#      interval: 5s
#      timeout: 2s
#      retries: 15
#    ports:
#      - "8001:8001"
#      - "8000:8000"
#      - "8443:8443"
#
#  konga-prepare:
#    image: pantsel/konga:latest
#    command: "-c prepare -a postgres -u postgresql://kong:kong@kong-database:5432/konga"  #注意是用户名：密码@数据库服务名称：端口
#    networks:
#      - kong-net
#    restart: on-failure
#    links:
#      - kong-database
#    depends_on:
#      - kong        #依赖kong服务
#      - kong-database #依赖kong-database服务
#
#  konga:
#    image: pantsel/konga:latest
#    restart: always
#    networks:
#      - kong-net
#    environment:
#      DB_ADAPTER: postgres
#      DB_HOST: kong-database
#      DB_USER: kong
#      DB_DATABASE: konga
#      DB_PASSWORD: kong #必须加上密码，不然会失败
#    depends_on:
#      - kong
#      - kong-database
#    ports:
#      - "1337:1337" #控制台访问端口